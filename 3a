#ifndef __LOSSFUNCTIONS_HPP__
#define __LOSSFUNCTIONS_HPP__
#include "Data.hpp"
#include <cmath>
#include <memory>

namespace LossFuctions {
enum class TYPE { MSE };
struct LossFunction {
      virtual double function(std::vector<OutputNetworkData> activations,
                              std::vector<OutputNetworkData> targets) = 0;
      virtual double derivative(OutputNetworkData activation,
                                OutputNetworkData target) = 0;
      virtual ~LossFunction() = default;
};
// error puede estar aca
struct MeanSquaredError : public LossFunction {
      double function(std::vector<OutputNetworkData> activations,
                      std::vector<OutputNetworkData> targets) override {
            const int SIZE_BATCH = activations.size();
            const int OUTPUT_SIZE = activations[0].size();
            long summation{};
            long loss{};
            for (auto itBatch = 0; itBatch < SIZE_BATCH; itBatch++) {
                  double individualLoss{};
                  for (int itSingle = 0; itSingle < OUTPUT_SIZE; itSingle++) {
                        summation +=
                            std::pow(targets[itBatch][itSingle] -
                                         activations[itBatch][itSingle],
                                     2);
                  }
                  individualLoss = summation / 2.0;
                  loss += individualLoss;
            }
            loss /= SIZE_BATCH;
            return loss;
      }
      double derivative(OutputNetworkData activation,
                        OutputNetworkData target) override {
            long double summ{};
            for (int it = 0; it < activation.size(); it++) {
                  summ += (target[it] - activation[it]);
            }
            return summ / activation.size();
      }
};
inline std::shared_ptr<LossFunction> newInstance(TYPE type) {
      switch (type) {
      case TYPE::MSE:
            return std::make_shared<MeanSquaredError>();
      }
      return std::make_shared<MeanSquaredError>();
}
} // namespace LossFuctions
#endif
